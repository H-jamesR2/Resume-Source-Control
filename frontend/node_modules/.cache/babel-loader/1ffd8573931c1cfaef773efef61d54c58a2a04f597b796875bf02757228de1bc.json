{"ast":null,"code":"export default function (e, n) {\n  return n = n || {}, new Promise(function (t, r) {\n    var s = new XMLHttpRequest(),\n      o = [],\n      u = [],\n      i = {},\n      a = function () {\n        return {\n          ok: 2 == (s.status / 100 | 0),\n          statusText: s.statusText,\n          status: s.status,\n          url: s.responseURL,\n          text: function () {\n            return Promise.resolve(s.responseText);\n          },\n          json: function () {\n            return Promise.resolve(s.responseText).then(JSON.parse);\n          },\n          blob: function () {\n            return Promise.resolve(new Blob([s.response]));\n          },\n          clone: a,\n          headers: {\n            keys: function () {\n              return o;\n            },\n            entries: function () {\n              return u;\n            },\n            get: function (e) {\n              return i[e.toLowerCase()];\n            },\n            has: function (e) {\n              return e.toLowerCase() in i;\n            }\n          }\n        };\n      };\n    for (var l in s.open(n.method || \"get\", e, !0), s.onload = function () {\n      s.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function (e, n, t) {\n        o.push(n = n.toLowerCase()), u.push([n, t]), i[n] = i[n] ? i[n] + \",\" + t : t;\n      }), t(a());\n    }, s.onerror = r, s.withCredentials = \"include\" == n.credentials, n.headers) s.setRequestHeader(l, n.headers[l]);\n    s.send(n.body || null);\n  });\n}","map":{"version":3,"mappings":"eAAe,UAASA,GAAKC;EAAAA,OAC5BA,IAAUA,KAAW,IACd,IAAIC,kBAAUC,GAASC;IAAAA,IACvBC,IAAU,IAAIC;MACdC,IAAO;MACPC,IAAM;MACNC,IAAU;MAEVC;QAAAA;UACLC,IAA8B,MAAzBN,EAAQO,SAAO,MAAI;UACxBC,YAAYR,EAAQQ;UACpBD,QAAQP,EAAQO;UAChBZ,KAAKK,EAAQS;UACbC;YAAAA,OAAYb,QAAQC,QAAQE,EAAQW;UAAAA;UACpCC;YAAAA,OAAYf,QAAQC,QAAQE,EAAQW,cAAcE,KAAKC,KAAKC;UAAAA;UAC5DC;YAAAA,OAAYnB,QAAQC,QAAQ,IAAImB,KAAK,CAACjB,EAAQK;UAAAA;UAC9Ca,OAAOb;UACPD,SAAS;YACRF;cAAAA,OAAYA;YAAAA;YACZiB;cAAAA,OAAehB;YAAAA;YACfiB,eAAKC;cAAAA,OAAKjB,EAAQiB,EAAEC;YAAAA;YACpBC,eAAKF;cAAAA,OAAKA,EAAEC,iBAAiBlB;YAAAA;UAAAA;QAAAA;MAAAA;IAAAA,KAmB1BoB,IAAMC,KAfXzB,EAAQ0B,KAAK9B,EAAQ+B,UAAU,OAAOhC,IAAK,IAE3CK,EAAQ4B;MACP5B,EAAQ6B,wBAAwBC,QAAQ,0CAAiCC,GAAGC,GAAKC;QAChF/B,EAAKgC,KAAKF,IAAMA,EAAIV,gBACpBnB,EAAI+B,KAAK,CAACF,GAAKC,KACf7B,EAAQ4B,KAAO5B,EAAQ4B,KAAU5B,EAAQ4B,WAAQC,IAAUA;MAAAA,IAE5DnC,EAAQO;IAAAA,GAGTL,EAAQmC,UAAUpC,GAElBC,EAAQoC,kBAAuC,aAArBxC,EAAQyC,aAElBzC,EAAQQ,SACvBJ,EAAQsC,iBAAiBb,GAAG7B,EAAQQ,QAAQqB;IAG7CzB,EAAQuC,KAAK3C,EAAQ4C,QAAQ;EAAA;AAAA","names":["url","options","Promise","resolve","reject","request","XMLHttpRequest","keys","all","headers","response","ok","status","statusText","responseURL","text","responseText","json","then","JSON","parse","blob","Blob","clone","entries","get","n","toLowerCase","has","const","i","open","method","onload","getAllResponseHeaders","replace","m","key","value","push","onerror","withCredentials","credentials","setRequestHeader","send","body"],"sources":["C:\\Users\\antho\\Documents\\College (Post-Secondary)\\Grade 16 - 8th Semester\\CSCI 499\\Project\\CS499_Capstone_Repository\\frontend\\node_modules\\unfetch\\src\\index.mjs"],"sourcesContent":["export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}