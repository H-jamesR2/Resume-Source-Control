{"ast":null,"code":"/*!\r\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\n\nimport { Buffer } from 'buffer';\nimport WordArray from './utils/WordArray';\nimport { Sha256 } from '@aws-crypto/sha256-js';\n\n/**\r\n * Returns a Buffer with a sequence of random nBytes\r\n *\r\n * @param {number} nBytes\r\n * @returns {Buffer} fixed-length sequence of random bytes\r\n */\n\nfunction randomBytes(nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n}\nimport BigInteger from './BigInteger';\n\n/**\r\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\r\n */\nvar HEX_MSB_REGEX = /^[89a-f]/i;\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\nvar AuthenticationHelper = /*#__PURE__*/function () {\n  /**\r\n   * Constructs a new AuthenticationHelper object\r\n   * @param {string} PoolName Cognito user pool name.\r\n   */\n  function AuthenticationHelper(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash(\"\" + this.padHex(this.N) + this.padHex(this.g)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n\n  /**\r\n   * @returns {BigInteger} small A, a random number\r\n   */\n  var _proto = AuthenticationHelper.prototype;\n  _proto.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  }\n\n  /**\r\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\r\n   * @returns {void}\r\n   */;\n  _proto.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  }\n\n  /**\r\n   * helper function to generate a random big integer\r\n   * @returns {BigInteger} a random value.\r\n   * @private\r\n   */;\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\n    // This will be interpreted as a postive 128-bit integer\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16);\n\n    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n\n    return randomBigInt;\n  }\n\n  /**\r\n   * helper function to generate a random string\r\n   * @returns {string} a random value.\r\n   * @private\r\n   */;\n  _proto.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  }\n\n  /**\r\n   * @returns {string} Generated random value included in password hash.\r\n   */;\n  _proto.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  }\n\n  /**\r\n   * @returns {string} Generated random value included in devices hash.\r\n   */;\n  _proto.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n\n  /**\r\n   * @returns {string} Value used to verify devices.\r\n   */;\n  _proto.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  }\n\n  /**\r\n   * Generate salts and compute verifier.\r\n   * @param {string} deviceGroupKey Devices to generate verifier for.\r\n   * @param {string} username User to generate verifier for.\r\n   * @param {nodeCallback<null>} callback Called with (err, null)\r\n   * @returns {void}\r\n   */;\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n    this.randomPassword = this.generateRandomString();\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex');\n\n    // The random hex will be unambiguously represented as a postive integer\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  }\n\n  /**\r\n   * Calculate the client's public value A = g^a%N\r\n   * with the generated random number a\r\n   * @param {BigInteger} a Randomly generated small A.\r\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\r\n   * @returns {void}\r\n   * @private\r\n   */;\n  _proto.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n      callback(null, A);\n    });\n  }\n\n  /**\r\n   * Calculate the client's value U which is the hash of A and B\r\n   * @param {BigInteger} A Large A value.\r\n   * @param {BigInteger} B Server B value.\r\n   * @returns {BigInteger} Computed U value.\r\n   * @private\r\n   */;\n  _proto.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  }\n\n  /**\r\n   * Calculate a hash from a bitArray\r\n   * @param {Buffer} buf Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */;\n  _proto.hash = function hash(buf) {\n    var awsCryptoHash = new Sha256();\n    awsCryptoHash.update(buf);\n    var resultFromAWSCrypto = awsCryptoHash.digestSync();\n    var hashHex = Buffer.from(resultFromAWSCrypto).toString('hex');\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  }\n\n  /**\r\n   * Calculate a hash from a hex string\r\n   * @param {String} hexStr Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */;\n  _proto.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  }\n\n  /**\r\n   * Standard hkdf algorithm\r\n   * @param {Buffer} ikm Input key material.\r\n   * @param {Buffer} salt Salt value.\r\n   * @returns {Buffer} Strong key material.\r\n   * @private\r\n   */;\n  _proto.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsBuffer = Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]);\n    var awsCryptoHash = new Sha256(salt);\n    awsCryptoHash.update(ikm);\n    var resultFromAWSCryptoPrk = awsCryptoHash.digestSync();\n    var awsCryptoHashHmac = new Sha256(resultFromAWSCryptoPrk);\n    awsCryptoHashHmac.update(infoBitsBuffer);\n    var resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();\n    var hashHexFromAWSCrypto = resultFromAWSCryptoHmac;\n    var currentHex = hashHexFromAWSCrypto.slice(0, 16);\n    return currentHex;\n  }\n\n  /**\r\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\r\n   * @param {String} username Username.\r\n   * @param {String} password Password.\r\n   * @param {BigInteger} serverBValue Server B value.\r\n   * @param {BigInteger} salt Generated salt.\r\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\r\n   * @returns {void}\r\n   */;\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue), 'hex'));\n      callback(null, hkdf);\n    });\n  }\n\n  /**\r\n   * Calculates the S value used in getPasswordAuthenticationKey\r\n   * @param {BigInteger} xValue Salted password hash value.\r\n   * @param {BigInteger} serverBValue Server B value.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */;\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  }\n\n  /**\r\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\r\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\r\n   */;\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n\n  /**\r\n   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\r\n   *\r\n   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\r\n   * byte array containing the two's-complement representation of a BigInteger. The array contains\r\n   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\r\n   *\r\n   * Examples showing how ambiguity is avoided by left padding with:\r\n   * \t\"00\" (for positive values where the most-significant-bit is set)\r\n   *  \"FF\" (for negative values where the most-significant-bit is set)\r\n   *\r\n   * padHex(bigInteger.fromInt(-236))  === \"FF14\"\r\n   * padHex(bigInteger.fromInt(20))    === \"14\"\r\n   *\r\n   * padHex(bigInteger.fromInt(-200))  === \"FF38\"\r\n   * padHex(bigInteger.fromInt(56))    === \"38\"\r\n   *\r\n   * padHex(bigInteger.fromInt(-20))   === \"EC\"\r\n   * padHex(bigInteger.fromInt(236))   === \"00EC\"\r\n   *\r\n   * padHex(bigInteger.fromInt(-56))   === \"C8\"\r\n   * padHex(bigInteger.fromInt(200))   === \"00C8\"\r\n   *\r\n   * @param {BigInteger} bigInt Number to encode.\r\n   * @returns {String} even-length hex string of the two's complement encoding.\r\n   */;\n  _proto.padHex = function padHex(bigInt) {\n    if (!(bigInt instanceof BigInteger)) {\n      throw new Error('Not a BigInteger');\n    }\n    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\n\n    /* Get a hex string for abs(bigInt) */\n    var hexStr = bigInt.abs().toString(16);\n\n    /* Pad hex to even length if needed */\n    hexStr = hexStr.length % 2 !== 0 ? \"0\" + hexStr : hexStr;\n\n    /* Prepend \"00\" if the most significant bit is set */\n    hexStr = HEX_MSB_REGEX.test(hexStr) ? \"00\" + hexStr : hexStr;\n    if (isNegative) {\n      /* Flip the bits of the representation */\n      var invertedNibbles = hexStr.split('').map(function (x) {\n        var invertedNibble = ~parseInt(x, 16) & 0xf;\n        return '0123456789ABCDEF'.charAt(invertedNibble);\n      }).join('');\n\n      /* After flipping the bits, add one to get the 2's complement representation */\n      var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\n      hexStr = flippedBitsBI.toString(16);\n\n      /*\r\n      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\r\n      \t\tAny sequence of '1' bits on the left can always be substituted with a single '1' bit\r\n      without changing the represented value.\r\n      \t\tThis only happens in the case when the input is 80...00\r\n      */\n      if (hexStr.toUpperCase().startsWith('FF8')) {\n        hexStr = hexStr.substring(2);\n      }\n    }\n    return hexStr;\n  };\n  return AuthenticationHelper;\n}();\nexport { AuthenticationHelper as default };","map":{"version":3,"names":["Buffer","WordArray","Sha256","randomBytes","nBytes","from","random","toString","BigInteger","HEX_MSB_REGEX","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","g","k","hexHash","padHex","smallAValue","generateRandomSmallA","getLargeAValue","infoBits","poolName","_proto","prototype","getSmallAValue","callback","_this","largeAValue","calculateA","err","hexRandom","randomBigInt","generateRandomString","getRandomPassword","randomPassword","getSaltDevices","SaltToHashDevices","getVerifierDevices","verifierDevices","generateHashDevice","deviceGroupKey","username","_this2","combinedString","hashedString","hash","modPow","verifierDevicesNotPadded","a","_this3","A","mod","equals","ZERO","Error","calculateU","B","UHexHash","finalU","buf","awsCryptoHash","update","resultFromAWSCrypto","digestSync","hashHex","Array","length","join","hexStr","computehkdf","ikm","salt","infoBitsBuffer","concat","String","fromCharCode","resultFromAWSCryptoPrk","awsCryptoHashHmac","resultFromAWSCryptoHmac","hashHexFromAWSCrypto","currentHex","slice","getPasswordAuthenticationKey","password","serverBValue","_this4","UValue","usernamePassword","usernamePasswordHash","xValue","calculateS","sValue","hkdf","_this5","gModPowXN","intValue2","subtract","multiply","add","err2","result","getNewPasswordRequiredChallengeUserAttributePrefix","bigInt","isNegative","compareTo","abs","test","invertedNibbles","split","map","x","invertedNibble","parseInt","charAt","flippedBitsBI","ONE","toUpperCase","startsWith","substring","default"],"sources":["C:/Users/antho/Documents/College (Post-Secondary)/Grade 16 - 8th Semester/CSCI 499/Project/CS499_Capstone_Repository/frontend/node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js"],"sourcesContent":["/*!\r\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Buffer } from 'buffer';\r\nimport WordArray from './utils/WordArray';\r\nimport { Sha256 } from '@aws-crypto/sha256-js';\r\n\r\n/**\r\n * Returns a Buffer with a sequence of random nBytes\r\n *\r\n * @param {number} nBytes\r\n * @returns {Buffer} fixed-length sequence of random bytes\r\n */\r\n\r\nfunction randomBytes(nBytes) {\r\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\r\n}\r\nimport BigInteger from './BigInteger';\r\n\r\n/**\r\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\r\n */\r\nvar HEX_MSB_REGEX = /^[89a-f]/i;\r\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\r\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\r\n\r\n/** @class */\r\nvar AuthenticationHelper = /*#__PURE__*/function () {\r\n  /**\r\n   * Constructs a new AuthenticationHelper object\r\n   * @param {string} PoolName Cognito user pool name.\r\n   */\r\n  function AuthenticationHelper(PoolName) {\r\n    this.N = new BigInteger(initN, 16);\r\n    this.g = new BigInteger('2', 16);\r\n    this.k = new BigInteger(this.hexHash(\"\" + this.padHex(this.N) + this.padHex(this.g)), 16);\r\n    this.smallAValue = this.generateRandomSmallA();\r\n    this.getLargeAValue(function () {});\r\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\r\n    this.poolName = PoolName;\r\n  }\r\n\r\n  /**\r\n   * @returns {BigInteger} small A, a random number\r\n   */\r\n  var _proto = AuthenticationHelper.prototype;\r\n  _proto.getSmallAValue = function getSmallAValue() {\r\n    return this.smallAValue;\r\n  }\r\n\r\n  /**\r\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\r\n   * @returns {void}\r\n   */;\r\n  _proto.getLargeAValue = function getLargeAValue(callback) {\r\n    var _this = this;\r\n    if (this.largeAValue) {\r\n      callback(null, this.largeAValue);\r\n    } else {\r\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\r\n        if (err) {\r\n          callback(err, null);\r\n        }\r\n        _this.largeAValue = largeAValue;\r\n        callback(null, _this.largeAValue);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * helper function to generate a random big integer\r\n   * @returns {BigInteger} a random value.\r\n   * @private\r\n   */;\r\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\r\n    // This will be interpreted as a postive 128-bit integer\r\n    var hexRandom = randomBytes(128).toString('hex');\r\n    var randomBigInt = new BigInteger(hexRandom, 16);\r\n\r\n    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\r\n\r\n    return randomBigInt;\r\n  }\r\n\r\n  /**\r\n   * helper function to generate a random string\r\n   * @returns {string} a random value.\r\n   * @private\r\n   */;\r\n  _proto.generateRandomString = function generateRandomString() {\r\n    return randomBytes(40).toString('base64');\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Generated random value included in password hash.\r\n   */;\r\n  _proto.getRandomPassword = function getRandomPassword() {\r\n    return this.randomPassword;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Generated random value included in devices hash.\r\n   */;\r\n  _proto.getSaltDevices = function getSaltDevices() {\r\n    return this.SaltToHashDevices;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Value used to verify devices.\r\n   */;\r\n  _proto.getVerifierDevices = function getVerifierDevices() {\r\n    return this.verifierDevices;\r\n  }\r\n\r\n  /**\r\n   * Generate salts and compute verifier.\r\n   * @param {string} deviceGroupKey Devices to generate verifier for.\r\n   * @param {string} username User to generate verifier for.\r\n   * @param {nodeCallback<null>} callback Called with (err, null)\r\n   * @returns {void}\r\n   */;\r\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\r\n    var _this2 = this;\r\n    this.randomPassword = this.generateRandomString();\r\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\r\n    var hashedString = this.hash(combinedString);\r\n    var hexRandom = randomBytes(16).toString('hex');\r\n\r\n    // The random hex will be unambiguously represented as a postive integer\r\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\r\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\r\n      if (err) {\r\n        callback(err, null);\r\n      }\r\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\r\n      callback(null, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the client's public value A = g^a%N\r\n   * with the generated random number a\r\n   * @param {BigInteger} a Randomly generated small A.\r\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\r\n   * @returns {void}\r\n   * @private\r\n   */;\r\n  _proto.calculateA = function calculateA(a, callback) {\r\n    var _this3 = this;\r\n    this.g.modPow(a, this.N, function (err, A) {\r\n      if (err) {\r\n        callback(err, null);\r\n      }\r\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\r\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\r\n      }\r\n      callback(null, A);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate the client's value U which is the hash of A and B\r\n   * @param {BigInteger} A Large A value.\r\n   * @param {BigInteger} B Server B value.\r\n   * @returns {BigInteger} Computed U value.\r\n   * @private\r\n   */;\r\n  _proto.calculateU = function calculateU(A, B) {\r\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\r\n    var finalU = new BigInteger(this.UHexHash, 16);\r\n    return finalU;\r\n  }\r\n\r\n  /**\r\n   * Calculate a hash from a bitArray\r\n   * @param {Buffer} buf Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */;\r\n  _proto.hash = function hash(buf) {\r\n    var awsCryptoHash = new Sha256();\r\n    awsCryptoHash.update(buf);\r\n    var resultFromAWSCrypto = awsCryptoHash.digestSync();\r\n    var hashHex = Buffer.from(resultFromAWSCrypto).toString('hex');\r\n    return new Array(64 - hashHex.length).join('0') + hashHex;\r\n  }\r\n\r\n  /**\r\n   * Calculate a hash from a hex string\r\n   * @param {String} hexStr Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */;\r\n  _proto.hexHash = function hexHash(hexStr) {\r\n    return this.hash(Buffer.from(hexStr, 'hex'));\r\n  }\r\n\r\n  /**\r\n   * Standard hkdf algorithm\r\n   * @param {Buffer} ikm Input key material.\r\n   * @param {Buffer} salt Salt value.\r\n   * @returns {Buffer} Strong key material.\r\n   * @private\r\n   */;\r\n  _proto.computehkdf = function computehkdf(ikm, salt) {\r\n    var infoBitsBuffer = Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]);\r\n    var awsCryptoHash = new Sha256(salt);\r\n    awsCryptoHash.update(ikm);\r\n    var resultFromAWSCryptoPrk = awsCryptoHash.digestSync();\r\n    var awsCryptoHashHmac = new Sha256(resultFromAWSCryptoPrk);\r\n    awsCryptoHashHmac.update(infoBitsBuffer);\r\n    var resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();\r\n    var hashHexFromAWSCrypto = resultFromAWSCryptoHmac;\r\n    var currentHex = hashHexFromAWSCrypto.slice(0, 16);\r\n    return currentHex;\r\n  }\r\n\r\n  /**\r\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\r\n   * @param {String} username Username.\r\n   * @param {String} password Password.\r\n   * @param {BigInteger} serverBValue Server B value.\r\n   * @param {BigInteger} salt Generated salt.\r\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\r\n   * @returns {void}\r\n   */;\r\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\r\n    var _this4 = this;\r\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\r\n      throw new Error('B cannot be zero.');\r\n    }\r\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\r\n    if (this.UValue.equals(BigInteger.ZERO)) {\r\n      throw new Error('U cannot be zero.');\r\n    }\r\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\r\n    var usernamePasswordHash = this.hash(usernamePassword);\r\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\r\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\r\n      if (err) {\r\n        callback(err, null);\r\n      }\r\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue), 'hex'));\r\n      callback(null, hkdf);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculates the S value used in getPasswordAuthenticationKey\r\n   * @param {BigInteger} xValue Salted password hash value.\r\n   * @param {BigInteger} serverBValue Server B value.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */;\r\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\r\n    var _this5 = this;\r\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\r\n      if (err) {\r\n        callback(err, null);\r\n      }\r\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\r\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\r\n        if (err2) {\r\n          callback(err2, null);\r\n        }\r\n        callback(null, result.mod(_this5.N));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\r\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\r\n   */;\r\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\r\n    return newPasswordRequiredChallengeUserAttributePrefix;\r\n  }\r\n\r\n  /**\r\n   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\r\n   *\r\n   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\r\n   * byte array containing the two's-complement representation of a BigInteger. The array contains\r\n   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\r\n   *\r\n   * Examples showing how ambiguity is avoided by left padding with:\r\n   * \t\"00\" (for positive values where the most-significant-bit is set)\r\n   *  \"FF\" (for negative values where the most-significant-bit is set)\r\n   *\r\n   * padHex(bigInteger.fromInt(-236))  === \"FF14\"\r\n   * padHex(bigInteger.fromInt(20))    === \"14\"\r\n   *\r\n   * padHex(bigInteger.fromInt(-200))  === \"FF38\"\r\n   * padHex(bigInteger.fromInt(56))    === \"38\"\r\n   *\r\n   * padHex(bigInteger.fromInt(-20))   === \"EC\"\r\n   * padHex(bigInteger.fromInt(236))   === \"00EC\"\r\n   *\r\n   * padHex(bigInteger.fromInt(-56))   === \"C8\"\r\n   * padHex(bigInteger.fromInt(200))   === \"00C8\"\r\n   *\r\n   * @param {BigInteger} bigInt Number to encode.\r\n   * @returns {String} even-length hex string of the two's complement encoding.\r\n   */;\r\n  _proto.padHex = function padHex(bigInt) {\r\n    if (!(bigInt instanceof BigInteger)) {\r\n      throw new Error('Not a BigInteger');\r\n    }\r\n    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\r\n\r\n    /* Get a hex string for abs(bigInt) */\r\n    var hexStr = bigInt.abs().toString(16);\r\n\r\n    /* Pad hex to even length if needed */\r\n    hexStr = hexStr.length % 2 !== 0 ? \"0\" + hexStr : hexStr;\r\n\r\n    /* Prepend \"00\" if the most significant bit is set */\r\n    hexStr = HEX_MSB_REGEX.test(hexStr) ? \"00\" + hexStr : hexStr;\r\n    if (isNegative) {\r\n      /* Flip the bits of the representation */\r\n      var invertedNibbles = hexStr.split('').map(function (x) {\r\n        var invertedNibble = ~parseInt(x, 16) & 0xf;\r\n        return '0123456789ABCDEF'.charAt(invertedNibble);\r\n      }).join('');\r\n\r\n      /* After flipping the bits, add one to get the 2's complement representation */\r\n      var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\r\n      hexStr = flippedBitsBI.toString(16);\r\n\r\n      /*\r\n      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\r\n      \t\tAny sequence of '1' bits on the left can always be substituted with a single '1' bit\r\n      without changing the represented value.\r\n      \t\tThis only happens in the case when the input is 80...00\r\n      */\r\n      if (hexStr.toUpperCase().startsWith('FF8')) {\r\n        hexStr = hexStr.substring(2);\r\n      }\r\n    }\r\n    return hexStr;\r\n  };\r\n  return AuthenticationHelper;\r\n}();\r\nexport { AuthenticationHelper as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}