{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_1 = require(\"@aws-crypto/util\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n      this.hash.update(inner);\n      this.outer.update(outer);\n      // overwrite the copied key in memory\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n  Sha256.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash) || this.error) {\n      return;\n    }\n    try {\n      this.hash.update((0, util_1.convertToBuffer)(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\r\n   * with the v2 aws-sdk.\r\n   */\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n      return this.outer.digest();\n    }\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\r\n   * To keep the same interface with the other hash functions\r\n   * the default is to expose this as an async method.\r\n   * However, it can sometimes be useful to have a sync method.\r\n   */\n  Sha256.prototype.digest = function () {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      return (0, tslib_1.__generator)(this, function (_a) {\n        return [2 /*return*/, this.digestSync()];\n      });\n    });\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n  var input = (0, util_1.convertToBuffer)(secret);\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AAEA;AAEA;EAKE,gBAAYA,MAAmB;IAJd,SAAI,GAAG,IAAIC,qBAAS,EAAE;IAKrC,IAAID,MAAM,EAAE;MACV,IAAI,CAACE,KAAK,GAAG,IAAID,qBAAS,EAAE;MAC5B,IAAME,KAAK,GAAGC,gBAAgB,CAACJ,MAAM,CAAC;MACtC,IAAME,KAAK,GAAG,IAAIG,UAAU,CAACC,sBAAU,CAAC;MACxCJ,KAAK,CAACK,GAAG,CAACJ,KAAK,CAAC;MAEhB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,sBAAU,EAAEE,CAAC,EAAE,EAAE;QACnCL,KAAK,CAACK,CAAC,CAAC,IAAI,IAAI;QAChBN,KAAK,CAACM,CAAC,CAAC,IAAI,IAAI;;MAGlB,IAAI,CAACC,IAAI,CAACC,MAAM,CAACP,KAAK,CAAC;MACvB,IAAI,CAACD,KAAK,CAACQ,MAAM,CAACR,KAAK,CAAC;MAExB;MACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACQ,UAAU,EAAEH,CAAC,EAAE,EAAE;QACzCL,KAAK,CAACK,CAAC,CAAC,GAAG,CAAC;;;EAGlB;EAEAI,uBAAM,GAAN,UAAOC,MAAkB;IACvB,IAAI,sBAAW,EAACA,MAAM,CAAC,IAAI,IAAI,CAACC,KAAK,EAAE;MACrC;;IAGF,IAAI;MACF,IAAI,CAACL,IAAI,CAACC,MAAM,CAAC,0BAAe,EAACG,MAAM,CAAC,CAAC;KAC1C,CAAC,OAAOE,CAAC,EAAE;MACV,IAAI,CAACD,KAAK,GAAGC,CAAC;;EAElB,CAAC;EAED;;;EAGAH,2BAAU,GAAV;IACE,IAAI,IAAI,CAACE,KAAK,EAAE;MACd,MAAM,IAAI,CAACA,KAAK;;IAGlB,IAAI,IAAI,CAACZ,KAAK,EAAE;MACd,IAAI,CAAC,IAAI,CAACA,KAAK,CAACc,QAAQ,EAAE;QACxB,IAAI,CAACd,KAAK,CAACQ,MAAM,CAAC,IAAI,CAACD,IAAI,CAACQ,MAAM,EAAE,CAAC;;MAGvC,OAAO,IAAI,CAACf,KAAK,CAACe,MAAM,EAAE;;IAG5B,OAAO,IAAI,CAACR,IAAI,CAACQ,MAAM,EAAE;EAC3B,CAAC;EAED;;;;;EAKML,uBAAM,GAAZ;;;QACE,sBAAO,IAAI,CAACM,UAAU,EAAE;;;GACzB;EACH,aAAC;AAAD,CAAC,EAlED;AAAaC;AAoEb,SAASf,gBAAgB,CAACJ,MAAkB;EAC1C,IAAIoB,KAAK,GAAG,0BAAe,EAACpB,MAAM,CAAC;EAEnC,IAAIoB,KAAK,CAACT,UAAU,GAAGL,sBAAU,EAAE;IACjC,IAAMe,UAAU,GAAG,IAAIpB,qBAAS,EAAE;IAClCoB,UAAU,CAACX,MAAM,CAACU,KAAK,CAAC;IACxBA,KAAK,GAAGC,UAAU,CAACJ,MAAM,EAAE;;EAG7B,IAAMK,MAAM,GAAG,IAAIjB,UAAU,CAACC,sBAAU,CAAC;EACzCgB,MAAM,CAACf,GAAG,CAACa,KAAK,CAAC;EACjB,OAAOE,MAAM;AACf","names":["secret","RawSha256_1","outer","inner","bufferFromSecret","Uint8Array","constants_1","set","i","hash","update","byteLength","Sha256","toHash","error","e","finished","digest","digestSync","exports","input","bufferHash","buffer"],"sources":["C:\\Users\\antho\\Documents\\College (Post-Secondary)\\Grade 16 - 8th Semester\\CSCI 499\\Project\\CS499_Capstone_Repository\\frontend\\node_modules\\@aws-crypto\\sha256-js\\src\\jsSha256.ts"],"sourcesContent":["import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\n\nexport class Sha256 implements Hash {\n  private readonly hash = new RawSha256();\n  private readonly outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}