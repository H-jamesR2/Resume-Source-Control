{"ast":null,"code":"/*!\r\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\n\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\nvar USER_POOL_ID_MAX_LENGTH = 55;\n\n/** @class */\nvar CognitoUserPool = /*#__PURE__*/function () {\n  /**\r\n   * Constructs a new CognitoUserPool object\r\n   * @param {object} data Creation options.\r\n   * @param {string} data.UserPoolId Cognito user pool id.\r\n   * @param {string} data.ClientId User pool application client id.\r\n   * @param {string} data.endpoint Optional custom service endpoint.\r\n   * @param {object} data.fetchOptions Optional options for fetch API.\r\n   *        (only credentials option is supported)\r\n   * @param {object} data.Storage Optional storage object.\r\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\r\n   *        boolean flag indicating if the data collection is enabled\r\n   *        to support cognito advanced security features. By default, this\r\n   *        flag is set to true.\r\n   */\n  function CognitoUserPool(data, wrapRefreshSessionCallback) {\n    var _ref = data || {},\n      UserPoolId = _ref.UserPoolId,\n      ClientId = _ref.ClientId,\n      endpoint = _ref.endpoint,\n      fetchOptions = _ref.fetchOptions,\n      AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint, fetchOptions);\n\n    /**\r\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\r\n     * if no input value is provided.\r\n     */\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    if (wrapRefreshSessionCallback) {\n      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;\n    }\n  }\n\n  /**\r\n   * @returns {string} the user pool id\r\n   */\n  var _proto = CognitoUserPool.prototype;\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n\n  /**\r\n   * @returns {string} the user pool name\r\n   */;\n  _proto.getUserPoolName = function getUserPoolName() {\n    return this.getUserPoolId().split('_')[1];\n  }\n\n  /**\r\n   * @returns {string} the client id\r\n   */;\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n\n  /**\r\n   * @typedef {object} SignUpResult\r\n   * @property {CognitoUser} user New user.\r\n   * @property {bool} userConfirmed If the user is already confirmed.\r\n   */\n  /**\r\n   * method for signing up a user\r\n   * @param {string} username User's username.\r\n   * @param {string} password Plain-text initial password entered by user.\r\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n   * @param {(AttributeArg[])=} validationData Application metadata.\r\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\r\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\r\n   * @returns {void}\r\n   */;\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n\n  /**\r\n   * method for getting the current user of the application from the local storage\r\n   *\r\n   * @returns {CognitoUser} the user retrieved from storage\r\n   */;\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n    return null;\n  }\n\n  /**\r\n   * This method returns the encoded data string used for cognito advanced security feature.\r\n   * This would be generated only when developer has included the JS used for collecting the\r\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\r\n   * features\r\n   * @param {string} username the username for the context data\r\n   * @returns {string} the user context data\r\n   **/;\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n    return {};\n  };\n  return CognitoUserPool;\n}();\nexport { CognitoUserPool as default };","map":{"version":3,"names":["Client","CognitoUser","StorageHelper","USER_POOL_ID_MAX_LENGTH","CognitoUserPool","data","wrapRefreshSessionCallback","_ref","UserPoolId","ClientId","endpoint","fetchOptions","AdvancedSecurityDataCollectionFlag","Error","length","test","region","split","userPoolId","clientId","client","advancedSecurityDataCollectionFlag","storage","Storage","getStorage","_proto","prototype","getUserPoolId","getUserPoolName","getClientId","signUp","username","password","userAttributes","validationData","callback","clientMetadata","_this","jsonReq","Username","Password","UserAttributes","ValidationData","ClientMetadata","getUserContextData","UserContextData","request","err","cognitoUser","Pool","returnData","user","userConfirmed","UserConfirmed","userSub","UserSub","codeDeliveryDetails","CodeDeliveryDetails","getCurrentUser","lastUserKey","lastAuthUser","getItem","AmazonCognitoAdvancedSecurityData","undefined","amazonCognitoAdvancedSecurityDataConst","advancedSecurityData","getData","userContextData","EncodedData","default"],"sources":["C:/Users/antho/Documents/College (Post-Secondary)/Grade 16 - 8th Semester/CSCI 499/Project/CS499_Capstone_Repository/frontend/node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js"],"sourcesContent":["/*!\r\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport Client from './Client';\r\nimport CognitoUser from './CognitoUser';\r\nimport StorageHelper from './StorageHelper';\r\nvar USER_POOL_ID_MAX_LENGTH = 55;\r\n\r\n/** @class */\r\nvar CognitoUserPool = /*#__PURE__*/function () {\r\n  /**\r\n   * Constructs a new CognitoUserPool object\r\n   * @param {object} data Creation options.\r\n   * @param {string} data.UserPoolId Cognito user pool id.\r\n   * @param {string} data.ClientId User pool application client id.\r\n   * @param {string} data.endpoint Optional custom service endpoint.\r\n   * @param {object} data.fetchOptions Optional options for fetch API.\r\n   *        (only credentials option is supported)\r\n   * @param {object} data.Storage Optional storage object.\r\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\r\n   *        boolean flag indicating if the data collection is enabled\r\n   *        to support cognito advanced security features. By default, this\r\n   *        flag is set to true.\r\n   */\r\n  function CognitoUserPool(data, wrapRefreshSessionCallback) {\r\n    var _ref = data || {},\r\n      UserPoolId = _ref.UserPoolId,\r\n      ClientId = _ref.ClientId,\r\n      endpoint = _ref.endpoint,\r\n      fetchOptions = _ref.fetchOptions,\r\n      AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\r\n    if (!UserPoolId || !ClientId) {\r\n      throw new Error('Both UserPoolId and ClientId are required.');\r\n    }\r\n    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {\r\n      throw new Error('Invalid UserPoolId format.');\r\n    }\r\n    var region = UserPoolId.split('_')[0];\r\n    this.userPoolId = UserPoolId;\r\n    this.clientId = ClientId;\r\n    this.client = new Client(region, endpoint, fetchOptions);\r\n\r\n    /**\r\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\r\n     * if no input value is provided.\r\n     */\r\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\r\n    this.storage = data.Storage || new StorageHelper().getStorage();\r\n    if (wrapRefreshSessionCallback) {\r\n      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the user pool id\r\n   */\r\n  var _proto = CognitoUserPool.prototype;\r\n  _proto.getUserPoolId = function getUserPoolId() {\r\n    return this.userPoolId;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the user pool name\r\n   */;\r\n  _proto.getUserPoolName = function getUserPoolName() {\r\n    return this.getUserPoolId().split('_')[1];\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the client id\r\n   */;\r\n  _proto.getClientId = function getClientId() {\r\n    return this.clientId;\r\n  }\r\n\r\n  /**\r\n   * @typedef {object} SignUpResult\r\n   * @property {CognitoUser} user New user.\r\n   * @property {bool} userConfirmed If the user is already confirmed.\r\n   */\r\n  /**\r\n   * method for signing up a user\r\n   * @param {string} username User's username.\r\n   * @param {string} password Plain-text initial password entered by user.\r\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n   * @param {(AttributeArg[])=} validationData Application metadata.\r\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\r\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\r\n   * @returns {void}\r\n   */;\r\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\r\n    var _this = this;\r\n    var jsonReq = {\r\n      ClientId: this.clientId,\r\n      Username: username,\r\n      Password: password,\r\n      UserAttributes: userAttributes,\r\n      ValidationData: validationData,\r\n      ClientMetadata: clientMetadata\r\n    };\r\n    if (this.getUserContextData(username)) {\r\n      jsonReq.UserContextData = this.getUserContextData(username);\r\n    }\r\n    this.client.request('SignUp', jsonReq, function (err, data) {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      var cognitoUser = {\r\n        Username: username,\r\n        Pool: _this,\r\n        Storage: _this.storage\r\n      };\r\n      var returnData = {\r\n        user: new CognitoUser(cognitoUser),\r\n        userConfirmed: data.UserConfirmed,\r\n        userSub: data.UserSub,\r\n        codeDeliveryDetails: data.CodeDeliveryDetails\r\n      };\r\n      return callback(null, returnData);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * method for getting the current user of the application from the local storage\r\n   *\r\n   * @returns {CognitoUser} the user retrieved from storage\r\n   */;\r\n  _proto.getCurrentUser = function getCurrentUser() {\r\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\r\n    var lastAuthUser = this.storage.getItem(lastUserKey);\r\n    if (lastAuthUser) {\r\n      var cognitoUser = {\r\n        Username: lastAuthUser,\r\n        Pool: this,\r\n        Storage: this.storage\r\n      };\r\n      return new CognitoUser(cognitoUser);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * This method returns the encoded data string used for cognito advanced security feature.\r\n   * This would be generated only when developer has included the JS used for collecting the\r\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\r\n   * features\r\n   * @param {string} username the username for the context data\r\n   * @returns {string} the user context data\r\n   **/;\r\n  _proto.getUserContextData = function getUserContextData(username) {\r\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\r\n      return undefined;\r\n    }\r\n    /* eslint-disable */\r\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\r\n    /* eslint-enable */\r\n\r\n    if (this.advancedSecurityDataCollectionFlag) {\r\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\r\n      if (advancedSecurityData) {\r\n        var userContextData = {\r\n          EncodedData: advancedSecurityData\r\n        };\r\n        return userContextData;\r\n      }\r\n    }\r\n    return {};\r\n  };\r\n  return CognitoUserPool;\r\n}();\r\nexport { CognitoUserPool as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}