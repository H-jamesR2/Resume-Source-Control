{"ast":null,"code":"export const fromUtf8 = input => {\n  const bytes = [];\n  for (let i = 0, len = input.length; i < len; i++) {\n    const value = input.charCodeAt(i);\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push(value >> 6 | 0b11000000, value & 0b111111 | 0b10000000);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n      bytes.push(surrogatePair >> 18 | 0b11110000, surrogatePair >> 12 & 0b111111 | 0b10000000, surrogatePair >> 6 & 0b111111 | 0b10000000, surrogatePair & 0b111111 | 0b10000000);\n    } else {\n      bytes.push(value >> 12 | 0b11100000, value >> 6 & 0b111111 | 0b10000000, value & 0b111111 | 0b10000000);\n    }\n  }\n  return Uint8Array.from(bytes);\n};\nexport const toUtf8 = input => {\n  let decoded = \"\";\n  for (let i = 0, len = input.length; i < len; i++) {\n    const byte = input[i];\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (0b11000000 <= byte && byte < 0b11100000) {\n      const nextByte = input[++i];\n      decoded += String.fromCharCode((byte & 0b11111) << 6 | nextByte & 0b111111);\n    } else if (0b11110000 <= byte && byte < 0b101101101) {\n      const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      const encoded = \"%\" + surrogatePair.map(byteValue => byteValue.toString(16)).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode((byte & 0b1111) << 12 | (input[++i] & 0b111111) << 6 | input[++i] & 0b111111);\n    }\n  }\n  return decoded;\n};","map":{"version":3,"names":["fromUtf8","input","bytes","i","len","length","value","charCodeAt","push","surrogatePair","Uint8Array","from","toUtf8","decoded","byte","String","fromCharCode","nextByte","encoded","map","byteValue","toString","join","decodeURIComponent"],"sources":["C:/Users/antho/Documents/College (Post-Secondary)/Grade 16 - 8th Semester/CSCI 499/Project/CS499_Capstone_Repository/frontend/node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js"],"sourcesContent":["export const fromUtf8 = (input) => {\r\n    const bytes = [];\r\n    for (let i = 0, len = input.length; i < len; i++) {\r\n        const value = input.charCodeAt(i);\r\n        if (value < 0x80) {\r\n            bytes.push(value);\r\n        }\r\n        else if (value < 0x800) {\r\n            bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\r\n        }\r\n        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\r\n            bytes.push((surrogatePair >> 18) | 0b11110000, ((surrogatePair >> 12) & 0b111111) | 0b10000000, ((surrogatePair >> 6) & 0b111111) | 0b10000000, (surrogatePair & 0b111111) | 0b10000000);\r\n        }\r\n        else {\r\n            bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\r\n        }\r\n    }\r\n    return Uint8Array.from(bytes);\r\n};\r\nexport const toUtf8 = (input) => {\r\n    let decoded = \"\";\r\n    for (let i = 0, len = input.length; i < len; i++) {\r\n        const byte = input[i];\r\n        if (byte < 0x80) {\r\n            decoded += String.fromCharCode(byte);\r\n        }\r\n        else if (0b11000000 <= byte && byte < 0b11100000) {\r\n            const nextByte = input[++i];\r\n            decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\r\n        }\r\n        else if (0b11110000 <= byte && byte < 0b101101101) {\r\n            const surrogatePair = [byte, input[++i], input[++i], input[++i]];\r\n            const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\r\n            decoded += decodeURIComponent(encoded);\r\n        }\r\n        else {\r\n            decoded += String.fromCharCode(((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111));\r\n        }\r\n    }\r\n    return decoded;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}