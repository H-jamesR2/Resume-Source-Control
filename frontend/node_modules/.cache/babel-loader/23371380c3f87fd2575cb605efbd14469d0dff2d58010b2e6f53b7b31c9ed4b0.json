{"ast":null,"code":"/*!\r\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\n/** @class */\nvar CognitoUserSession = /*#__PURE__*/function () {\n  /**\r\n   * Constructs a new CognitoUserSession object\r\n   * @param {CognitoIdToken} IdToken The session's Id token.\r\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\r\n   * @param {CognitoAccessToken} AccessToken The session's access token.\r\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\r\n   */\n  function CognitoUserSession(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      IdToken = _ref.IdToken,\n      RefreshToken = _ref.RefreshToken,\n      AccessToken = _ref.AccessToken,\n      ClockDrift = _ref.ClockDrift;\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n  }\n\n  /**\r\n   * @returns {CognitoIdToken} the session's Id token\r\n   */\n  var _proto = CognitoUserSession.prototype;\n  _proto.getIdToken = function getIdToken() {\n    return this.idToken;\n  }\n\n  /**\r\n   * @returns {CognitoRefreshToken} the session's refresh token\r\n   */;\n  _proto.getRefreshToken = function getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  /**\r\n   * @returns {CognitoAccessToken} the session's access token\r\n   */;\n  _proto.getAccessToken = function getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\r\n   * @returns {int} the session's clock drift\r\n   */;\n  _proto.getClockDrift = function getClockDrift() {\n    return this.clockDrift;\n  }\n\n  /**\r\n   * @returns {int} the computer's clock drift\r\n   */;\n  _proto.calculateClockDrift = function calculateClockDrift() {\n    var now = Math.floor(new Date() / 1000);\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n    return now - iat;\n  }\n\n  /**\r\n   * Checks to see if the session is still valid based on session expiry information found\r\n   * in tokens and the current time (adjusted with clock drift)\r\n   * @returns {boolean} if the session is still valid\r\n   */;\n  _proto.isValid = function isValid() {\n    var now = Math.floor(new Date() / 1000);\n    var adjusted = now - this.clockDrift;\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n  };\n  return CognitoUserSession;\n}();\nexport { CognitoUserSession as default };","map":{"version":3,"names":["CognitoUserSession","_temp","_ref","IdToken","RefreshToken","AccessToken","ClockDrift","Error","idToken","refreshToken","accessToken","clockDrift","undefined","calculateClockDrift","_proto","prototype","getIdToken","getRefreshToken","getAccessToken","getClockDrift","now","Math","floor","Date","iat","min","getIssuedAt","isValid","adjusted","getExpiration","default"],"sources":["C:/Users/antho/Documents/College (Post-Secondary)/Grade 16 - 8th Semester/CSCI 499/Project/CS499_Capstone_Repository/frontend/node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js"],"sourcesContent":["/*!\r\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/** @class */\r\nvar CognitoUserSession = /*#__PURE__*/function () {\r\n  /**\r\n   * Constructs a new CognitoUserSession object\r\n   * @param {CognitoIdToken} IdToken The session's Id token.\r\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\r\n   * @param {CognitoAccessToken} AccessToken The session's access token.\r\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\r\n   */\r\n  function CognitoUserSession(_temp) {\r\n    var _ref = _temp === void 0 ? {} : _temp,\r\n      IdToken = _ref.IdToken,\r\n      RefreshToken = _ref.RefreshToken,\r\n      AccessToken = _ref.AccessToken,\r\n      ClockDrift = _ref.ClockDrift;\r\n    if (AccessToken == null || IdToken == null) {\r\n      throw new Error('Id token and Access Token must be present.');\r\n    }\r\n    this.idToken = IdToken;\r\n    this.refreshToken = RefreshToken;\r\n    this.accessToken = AccessToken;\r\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoIdToken} the session's Id token\r\n   */\r\n  var _proto = CognitoUserSession.prototype;\r\n  _proto.getIdToken = function getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoRefreshToken} the session's refresh token\r\n   */;\r\n  _proto.getRefreshToken = function getRefreshToken() {\r\n    return this.refreshToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoAccessToken} the session's access token\r\n   */;\r\n  _proto.getAccessToken = function getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the session's clock drift\r\n   */;\r\n  _proto.getClockDrift = function getClockDrift() {\r\n    return this.clockDrift;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the computer's clock drift\r\n   */;\r\n  _proto.calculateClockDrift = function calculateClockDrift() {\r\n    var now = Math.floor(new Date() / 1000);\r\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\r\n    return now - iat;\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the session is still valid based on session expiry information found\r\n   * in tokens and the current time (adjusted with clock drift)\r\n   * @returns {boolean} if the session is still valid\r\n   */;\r\n  _proto.isValid = function isValid() {\r\n    var now = Math.floor(new Date() / 1000);\r\n    var adjusted = now - this.clockDrift;\r\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\r\n  };\r\n  return CognitoUserSession;\r\n}();\r\nexport { CognitoUserSession as default };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,kBAAkB,GAAG,aAAa,YAAY;EAChD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,kBAAkB,CAACC,KAAK,EAAE;IACjC,IAAIC,IAAI,GAAGD,KAAK,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,KAAK;MACtCE,OAAO,GAAGD,IAAI,CAACC,OAAO;MACtBC,YAAY,GAAGF,IAAI,CAACE,YAAY;MAChCC,WAAW,GAAGH,IAAI,CAACG,WAAW;MAC9BC,UAAU,GAAGJ,IAAI,CAACI,UAAU;IAC9B,IAAID,WAAW,IAAI,IAAI,IAAIF,OAAO,IAAI,IAAI,EAAE;MAC1C,MAAM,IAAII,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IACA,IAAI,CAACC,OAAO,GAAGL,OAAO;IACtB,IAAI,CAACM,YAAY,GAAGL,YAAY;IAChC,IAAI,CAACM,WAAW,GAAGL,WAAW;IAC9B,IAAI,CAACM,UAAU,GAAGL,UAAU,KAAKM,SAAS,GAAG,IAAI,CAACC,mBAAmB,EAAE,GAAGP,UAAU;EACtF;;EAEA;AACF;AACA;EACE,IAAIQ,MAAM,GAAGd,kBAAkB,CAACe,SAAS;EACzCD,MAAM,CAACE,UAAU,GAAG,SAASA,UAAU,GAAG;IACxC,OAAO,IAAI,CAACR,OAAO;EACrB;;EAEA;AACF;AACA,KAFE;EAGAM,MAAM,CAACG,eAAe,GAAG,SAASA,eAAe,GAAG;IAClD,OAAO,IAAI,CAACR,YAAY;EAC1B;;EAEA;AACF;AACA,KAFE;EAGAK,MAAM,CAACI,cAAc,GAAG,SAASA,cAAc,GAAG;IAChD,OAAO,IAAI,CAACR,WAAW;EACzB;;EAEA;AACF;AACA,KAFE;EAGAI,MAAM,CAACK,aAAa,GAAG,SAASA,aAAa,GAAG;IAC9C,OAAO,IAAI,CAACR,UAAU;EACxB;;EAEA;AACF;AACA,KAFE;EAGAG,MAAM,CAACD,mBAAmB,GAAG,SAASA,mBAAmB,GAAG;IAC1D,IAAIO,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,GAAG,IAAI,CAAC;IACvC,IAAIC,GAAG,GAAGH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACf,WAAW,CAACgB,WAAW,EAAE,EAAE,IAAI,CAAClB,OAAO,CAACkB,WAAW,EAAE,CAAC;IAC9E,OAAON,GAAG,GAAGI,GAAG;EAClB;;EAEA;AACF;AACA;AACA;AACA,KAJE;EAKAV,MAAM,CAACa,OAAO,GAAG,SAASA,OAAO,GAAG;IAClC,IAAIP,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,GAAG,IAAI,CAAC;IACvC,IAAIK,QAAQ,GAAGR,GAAG,GAAG,IAAI,CAACT,UAAU;IACpC,OAAOiB,QAAQ,GAAG,IAAI,CAAClB,WAAW,CAACmB,aAAa,EAAE,IAAID,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAACqB,aAAa,EAAE;EAC/F,CAAC;EACD,OAAO7B,kBAAkB;AAC3B,CAAC,EAAE;AACH,SAASA,kBAAkB,IAAI8B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}